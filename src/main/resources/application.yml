#spring.application.name=security

#this is the header so every thing after it will be from spring
spring:
  #same as here
  datasource:
    #spring.datasource.url
    url: jdbc:postgresql://postgres:5432/e-commerce
    #spring.datasource.username=postgres
    username: postgres
    #spring.datasource.password=postgres
    password: postgres
    #this the driver class
    driver-class: org.postgresql.Driver
  liquibase:
    change-log: classpath:db/changelog/changelog.sql
  jpa:
#    hibernate:
      #spring.jpa.hibernate.ddl-auto
#      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database: postgresql
    #this for  dialect that help hibernate to translate into understandable sql lang
    database-perform: org.hibernate.dialect.PostgreSQLDialect
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB

cloudinary:
  cloud_name: dpc0ohu0g
  api_key: 399568424786841
  api_secret: jaLvAsGQArQWNBpxuPLEuHd9-ZA

JWT:
  secret_key: "c1a7a6461e65ce4e8a362126e3d3b80e16bc400dea0a48a801537347fc071327"
api:
  prefix: "/api/v1"




#for test
#app:
 # api_key: ${MY_API_KEY}
  #database_url: ${BD_URL:jdbc:postgresql://postgres:5432/postgres}
# i can save this apikey in my system by
# using terminal   export MY_API_KEY="1234"
#or i can do it from the code editor
#ok as you can see in db i use DB_URL which is env var but if there was not one in my system or editor
#then as an alternative it will take the url i give to it which i can put after ":"



#so if i move the executable file of the app in another place i need to give it the env var when i try to run the file
#so if you try to run file from terminal
# -- is the way to pass env var in terminal
#java -jar target/ecommerce/version.jar  --MY_API_KEY="123456" --BD_URL="adsljlask
#
#
#
#